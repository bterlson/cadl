// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using UnbrandedTypeSpec;

namespace UnbrandedTypeSpec.Models
{
    /// <summary> this is a roundtrip model. </summary>
    public partial class RoundTripModel
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="global::UnbrandedTypeSpec.Models.RoundTripModel"/>. </summary>
        /// <param name="requiredString"> Required string, illustrating a reference type property. </param>
        /// <param name="requiredInt"> Required int, illustrating a value type property. </param>
        /// <param name="requiredCollection"> Required collection of enums. </param>
        /// <param name="requiredDictionary"> Required dictionary of enums. </param>
        /// <param name="requiredModel"> Required model. </param>
        /// <param name="requiredUnknown"> required unknown. </param>
        /// <param name="requiredRecordUnknown"> required record of unknown. </param>
        /// <param name="modelWithRequiredNullable"> this is a model with required nullable properties. </param>
        /// <param name="requiredBytes"> Required bytes. </param>
        /// <exception cref="global::System.ArgumentNullException"> <paramref name="requiredString"/>, <paramref name="requiredCollection"/>, <paramref name="requiredDictionary"/>, <paramref name="requiredModel"/>, <paramref name="requiredUnknown"/>, <paramref name="requiredRecordUnknown"/>, <paramref name="modelWithRequiredNullable"/> or <paramref name="requiredBytes"/> is null. </exception>
        public RoundTripModel(string requiredString, int requiredInt, global::System.Collections.Generic.IEnumerable<global::UnbrandedTypeSpec.Models.StringFixedEnum> requiredCollection, global::System.Collections.Generic.IDictionary<string, global::UnbrandedTypeSpec.Models.StringExtensibleEnum> requiredDictionary, global::UnbrandedTypeSpec.Models.Thing requiredModel, global::System.BinaryData requiredUnknown, global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> requiredRecordUnknown, global::UnbrandedTypeSpec.Models.ModelWithRequiredNullableProperties modelWithRequiredNullable, global::System.BinaryData requiredBytes)
        {
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredString, nameof(requiredString));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredCollection, nameof(requiredCollection));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredDictionary, nameof(requiredDictionary));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredModel, nameof(requiredModel));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredUnknown, nameof(requiredUnknown));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredRecordUnknown, nameof(requiredRecordUnknown));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(modelWithRequiredNullable, nameof(modelWithRequiredNullable));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredBytes, nameof(requiredBytes));

            RequiredString = requiredString;
            RequiredInt = requiredInt;
            RequiredCollection = requiredCollection.ToList();
            RequiredDictionary = requiredDictionary;
            RequiredModel = requiredModel;
            IntExtensibleEnumCollection = new global::UnbrandedTypeSpec.ChangeTrackingList<global::UnbrandedTypeSpec.Models.IntExtensibleEnum>();
            FloatExtensibleEnumCollection = new global::UnbrandedTypeSpec.ChangeTrackingList<global::UnbrandedTypeSpec.Models.FloatExtensibleEnum>();
            FloatFixedEnumCollection = new global::UnbrandedTypeSpec.ChangeTrackingList<global::UnbrandedTypeSpec.Models.FloatFixedEnum>();
            IntFixedEnumCollection = new global::UnbrandedTypeSpec.ChangeTrackingList<global::UnbrandedTypeSpec.Models.IntFixedEnum>();
            RequiredUnknown = requiredUnknown;
            RequiredRecordUnknown = requiredRecordUnknown;
            OptionalRecordUnknown = new global::UnbrandedTypeSpec.ChangeTrackingDictionary<string, global::System.BinaryData>();
            ReadOnlyRequiredRecordUnknown = new global::UnbrandedTypeSpec.ChangeTrackingDictionary<string, global::System.BinaryData>();
            ReadOnlyOptionalRecordUnknown = new global::UnbrandedTypeSpec.ChangeTrackingDictionary<string, global::System.BinaryData>();
            ModelWithRequiredNullable = modelWithRequiredNullable;
            RequiredBytes = requiredBytes;
        }

        internal RoundTripModel(string requiredString, int requiredInt, global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.StringFixedEnum> requiredCollection, global::System.Collections.Generic.IDictionary<string, global::UnbrandedTypeSpec.Models.StringExtensibleEnum> requiredDictionary, global::UnbrandedTypeSpec.Models.Thing requiredModel, global::UnbrandedTypeSpec.Models.IntExtensibleEnum? intExtensibleEnum, global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.IntExtensibleEnum> intExtensibleEnumCollection, global::UnbrandedTypeSpec.Models.FloatExtensibleEnum? floatExtensibleEnum, global::UnbrandedTypeSpec.Models.FloatExtensibleEnumWithIntValue? floatExtensibleEnumWithIntValue, global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.FloatExtensibleEnum> floatExtensibleEnumCollection, global::UnbrandedTypeSpec.Models.FloatFixedEnum? floatFixedEnum, global::UnbrandedTypeSpec.Models.FloatFixedEnumWithIntValue? floatFixedEnumWithIntValue, global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.FloatFixedEnum> floatFixedEnumCollection, global::UnbrandedTypeSpec.Models.IntFixedEnum? intFixedEnum, global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.IntFixedEnum> intFixedEnumCollection, global::UnbrandedTypeSpec.Models.StringFixedEnum? stringFixedEnum, global::System.BinaryData requiredUnknown, global::System.BinaryData optionalUnknown, global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> requiredRecordUnknown, global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> optionalRecordUnknown, global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.BinaryData> readOnlyRequiredRecordUnknown, global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.BinaryData> readOnlyOptionalRecordUnknown, global::UnbrandedTypeSpec.Models.ModelWithRequiredNullableProperties modelWithRequiredNullable, global::System.BinaryData requiredBytes, global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> additionalBinaryDataProperties)
        {
            RequiredString = requiredString;
            RequiredInt = requiredInt;
            RequiredCollection = requiredCollection;
            RequiredDictionary = requiredDictionary;
            RequiredModel = requiredModel;
            IntExtensibleEnum = intExtensibleEnum;
            IntExtensibleEnumCollection = intExtensibleEnumCollection;
            FloatExtensibleEnum = floatExtensibleEnum;
            FloatExtensibleEnumWithIntValue = floatExtensibleEnumWithIntValue;
            FloatExtensibleEnumCollection = floatExtensibleEnumCollection;
            FloatFixedEnum = floatFixedEnum;
            FloatFixedEnumWithIntValue = floatFixedEnumWithIntValue;
            FloatFixedEnumCollection = floatFixedEnumCollection;
            IntFixedEnum = intFixedEnum;
            IntFixedEnumCollection = intFixedEnumCollection;
            StringFixedEnum = stringFixedEnum;
            RequiredUnknown = requiredUnknown;
            OptionalUnknown = optionalUnknown;
            RequiredRecordUnknown = requiredRecordUnknown;
            OptionalRecordUnknown = optionalRecordUnknown;
            ReadOnlyRequiredRecordUnknown = readOnlyRequiredRecordUnknown;
            ReadOnlyOptionalRecordUnknown = readOnlyOptionalRecordUnknown;
            ModelWithRequiredNullable = modelWithRequiredNullable;
            RequiredBytes = requiredBytes;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Required string, illustrating a reference type property. </summary>
        public string RequiredString { get; set; }

        /// <summary> Required int, illustrating a value type property. </summary>
        public int RequiredInt { get; set; }

        /// <summary> Required collection of enums. </summary>
        public global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.StringFixedEnum> RequiredCollection { get; }

        /// <summary> Required dictionary of enums. </summary>
        public global::System.Collections.Generic.IDictionary<string, global::UnbrandedTypeSpec.Models.StringExtensibleEnum> RequiredDictionary { get; }

        /// <summary> Required model. </summary>
        public global::UnbrandedTypeSpec.Models.Thing RequiredModel { get; set; }

        /// <summary> this is an int based extensible enum. </summary>
        public global::UnbrandedTypeSpec.Models.IntExtensibleEnum? IntExtensibleEnum { get; set; }

        /// <summary> this is a collection of int based extensible enum. </summary>
        public global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.IntExtensibleEnum> IntExtensibleEnumCollection { get; }

        /// <summary> this is a float based extensible enum. </summary>
        public global::UnbrandedTypeSpec.Models.FloatExtensibleEnum? FloatExtensibleEnum { get; set; }

        /// <summary> this is a float based extensible enum. </summary>
        public global::UnbrandedTypeSpec.Models.FloatExtensibleEnumWithIntValue? FloatExtensibleEnumWithIntValue { get; set; }

        /// <summary> this is a collection of float based extensible enum. </summary>
        public global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.FloatExtensibleEnum> FloatExtensibleEnumCollection { get; }

        /// <summary> this is a float based fixed enum. </summary>
        public global::UnbrandedTypeSpec.Models.FloatFixedEnum? FloatFixedEnum { get; set; }

        /// <summary> this is a float based fixed enum. </summary>
        public global::UnbrandedTypeSpec.Models.FloatFixedEnumWithIntValue? FloatFixedEnumWithIntValue { get; set; }

        /// <summary> this is a collection of float based fixed enum. </summary>
        public global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.FloatFixedEnum> FloatFixedEnumCollection { get; }

        /// <summary> this is a int based fixed enum. </summary>
        public global::UnbrandedTypeSpec.Models.IntFixedEnum? IntFixedEnum { get; set; }

        /// <summary> this is a collection of int based fixed enum. </summary>
        public global::System.Collections.Generic.IList<global::UnbrandedTypeSpec.Models.IntFixedEnum> IntFixedEnumCollection { get; }

        /// <summary> this is a string based fixed enum. </summary>
        public global::UnbrandedTypeSpec.Models.StringFixedEnum? StringFixedEnum { get; set; }

        /// <summary>
        /// required unknown
        /// <para> To assign an object to this property use <see cref="global::System.BinaryData.FromObjectAsJson{T}(T, global::System.Text.Json.JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="global::System.BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public global::System.BinaryData RequiredUnknown { get; set; }

        /// <summary>
        /// optional unknown
        /// <para> To assign an object to this property use <see cref="global::System.BinaryData.FromObjectAsJson{T}(T, global::System.Text.Json.JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="global::System.BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public global::System.BinaryData OptionalUnknown { get; set; }

        /// <summary>
        /// required record of unknown
        /// <para> To assign an object to the value of this property use <see cref="global::System.BinaryData.FromObjectAsJson{T}(T, global::System.Text.Json.JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="global::System.BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> RequiredRecordUnknown { get; }

        /// <summary>
        /// optional record of unknown
        /// <para> To assign an object to the value of this property use <see cref="global::System.BinaryData.FromObjectAsJson{T}(T, global::System.Text.Json.JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="global::System.BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> OptionalRecordUnknown { get; }

        /// <summary>
        /// required readonly record of unknown
        /// <para> To assign an object to the value of this property use <see cref="global::System.BinaryData.FromObjectAsJson{T}(T, global::System.Text.Json.JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="global::System.BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.BinaryData> ReadOnlyRequiredRecordUnknown { get; }

        /// <summary>
        /// optional readonly record of unknown
        /// <para> To assign an object to the value of this property use <see cref="global::System.BinaryData.FromObjectAsJson{T}(T, global::System.Text.Json.JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="global::System.BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.BinaryData> ReadOnlyOptionalRecordUnknown { get; }

        /// <summary> this is a model with required nullable properties. </summary>
        public global::UnbrandedTypeSpec.Models.ModelWithRequiredNullableProperties ModelWithRequiredNullable { get; set; }

        /// <summary>
        /// Required bytes
        /// <para>
        /// To assign a byte[] to this property use <see cref="global::System.BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromBytes(new byte[] { 1, 2, 3 }). </term>
        /// <description> Creates a payload of "AQID". </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public global::System.BinaryData RequiredBytes { get; set; }
    }
}
