// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;

namespace UnbrandedTypeSpec
{
    internal partial class ChangeTrackingDictionary<TKey, TValue> : global::System.Collections.Generic.IDictionary<TKey, TValue>, global::System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
        where TKey : notnull
    {
        private global::System.Collections.Generic.IDictionary<TKey, TValue> _innerDictionary;

        public ChangeTrackingDictionary()
        {
        }

        public ChangeTrackingDictionary(global::System.Collections.Generic.IDictionary<TKey, TValue> dictionary)
        {
            if ((dictionary == null))
            {
                return;
            }
            _innerDictionary = new global::System.Collections.Generic.Dictionary<TKey, TValue>(dictionary);
        }

        public ChangeTrackingDictionary(global::System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary)
        {
            if ((dictionary == null))
            {
                return;
            }
            _innerDictionary = new global::System.Collections.Generic.Dictionary<TKey, TValue>();
            foreach (var pair in dictionary)
            {
                _innerDictionary.Add(pair);
            }
        }

        public bool IsUndefined => (_innerDictionary == null);

        public int Count => this.IsUndefined ? 0 : this.EnsureDictionary().Count;

        public bool IsReadOnly => this.IsUndefined ? false : this.EnsureDictionary().IsReadOnly;

        public global::System.Collections.Generic.ICollection<TKey> Keys => this.IsUndefined ? global::System.Array.Empty<TKey>() : this.EnsureDictionary().Keys;

        public global::System.Collections.Generic.ICollection<TValue> Values => this.IsUndefined ? global::System.Array.Empty<TValue>() : this.EnsureDictionary().Values;

        public TValue this[TKey key]
        {
            get
            {
                if (this.IsUndefined)
                {
                    throw new global::System.Collections.Generic.KeyNotFoundException(nameof(key));
                }
                return this.EnsureDictionary()[key];
            }
            set
            {
                this.EnsureDictionary()[key] = value;
            }
        }

        global::System.Collections.Generic.IEnumerable<TKey> global::System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys => this.Keys;

        global::System.Collections.Generic.IEnumerable<TValue> global::System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values => this.Values;

        public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator()
        {
            if (this.IsUndefined)
            {
                global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<TKey, TValue>> enumerateEmpty()
                {
                    yield break;
                }
                return enumerateEmpty();
            }
            return this.EnsureDictionary().GetEnumerator();
        }

        global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }

        public void Add(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            this.EnsureDictionary().Add(item);
        }

        public void Clear()
        {
            this.EnsureDictionary().Clear();
        }

        public bool Contains(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            if (this.IsUndefined)
            {
                return false;
            }
            return this.EnsureDictionary().Contains(item);
        }

        public void CopyTo(global::System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, int index)
        {
            if (this.IsUndefined)
            {
                return;
            }
            this.EnsureDictionary().CopyTo(array, index);
        }

        public bool Remove(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            if (this.IsUndefined)
            {
                return false;
            }
            return this.EnsureDictionary().Remove(item);
        }

        public void Add(TKey key, TValue value)
        {
            this.EnsureDictionary().Add(key, value);
        }

        public bool ContainsKey(TKey key)
        {
            if (this.IsUndefined)
            {
                return false;
            }
            return this.EnsureDictionary().ContainsKey(key);
        }

        public bool Remove(TKey key)
        {
            if (this.IsUndefined)
            {
                return false;
            }
            return this.EnsureDictionary().Remove(key);
        }

        public bool TryGetValue(TKey key, out TValue value)
        {
            if (this.IsUndefined)
            {
                value = default;
                return false;
            }
            return this.EnsureDictionary().TryGetValue(key, out value);
        }

        public global::System.Collections.Generic.IDictionary<TKey, TValue> EnsureDictionary()
        {
            return (_innerDictionary ??= new global::System.Collections.Generic.Dictionary<TKey, TValue>());
        }
    }
}
