// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using UnbrandedTypeSpec;

namespace UnbrandedTypeSpec.Models
{
    /// <summary> A model with a few properties of literal types. </summary>
    public partial class Thing
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="global::UnbrandedTypeSpec.Models.Thing"/>. </summary>
        /// <param name="name"> name of the Thing. </param>
        /// <param name="requiredUnion"> required Union. </param>
        /// <param name="requiredBadDescription"> description with xml &lt;|endoftext|&gt;. </param>
        /// <param name="requiredNullableList"> required nullable collection. </param>
        /// <exception cref="global::System.ArgumentNullException"> <paramref name="name"/>, <paramref name="requiredUnion"/> or <paramref name="requiredBadDescription"/> is null. </exception>
        public Thing(string name, global::System.BinaryData requiredUnion, string requiredBadDescription, global::System.Collections.Generic.IEnumerable<int> requiredNullableList)
        {
            global::UnbrandedTypeSpec.Argument.AssertNotNull(name, nameof(name));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredUnion, nameof(requiredUnion));
            global::UnbrandedTypeSpec.Argument.AssertNotNull(requiredBadDescription, nameof(requiredBadDescription));

            Name = name;
            RequiredUnion = requiredUnion;
            RequiredBadDescription = requiredBadDescription;
            OptionalNullableList = new global::UnbrandedTypeSpec.ChangeTrackingList<int>();
            RequiredNullableList = requiredNullableList?.ToList();
        }

        internal Thing(string name, global::System.BinaryData requiredUnion, global::UnbrandedTypeSpec.Models.ThingRequiredLiteralString requiredLiteralString, global::UnbrandedTypeSpec.Models.ThingRequiredLiteralInt requiredLiteralInt, global::UnbrandedTypeSpec.Models.ThingRequiredLiteralFloat requiredLiteralFloat, bool requiredLiteralBool, global::UnbrandedTypeSpec.Models.ThingOptionalLiteralString? optionalLiteralString, global::UnbrandedTypeSpec.Models.ThingOptionalLiteralInt? optionalLiteralInt, global::UnbrandedTypeSpec.Models.ThingOptionalLiteralFloat? optionalLiteralFloat, bool? optionalLiteralBool, string requiredBadDescription, global::System.Collections.Generic.IList<int> optionalNullableList, global::System.Collections.Generic.IList<int> requiredNullableList, global::System.Collections.Generic.IDictionary<string, global::System.BinaryData> additionalBinaryDataProperties)
        {
            Name = name;
            RequiredUnion = requiredUnion;
            RequiredLiteralString = requiredLiteralString;
            RequiredLiteralInt = requiredLiteralInt;
            RequiredLiteralFloat = requiredLiteralFloat;
            RequiredLiteralBool = requiredLiteralBool;
            OptionalLiteralString = optionalLiteralString;
            OptionalLiteralInt = optionalLiteralInt;
            OptionalLiteralFloat = optionalLiteralFloat;
            OptionalLiteralBool = optionalLiteralBool;
            RequiredBadDescription = requiredBadDescription;
            OptionalNullableList = optionalNullableList;
            RequiredNullableList = requiredNullableList;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> name of the Thing. </summary>
        public string Name { get; set; }

        /// <summary>
        /// required Union
        /// <para> To assign an object to this property use <see cref="global::System.BinaryData.FromObjectAsJson{T}(T, global::System.Text.Json.JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="global::System.BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description> <see cref="string"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="global::System.Collections.Generic.IList{T}"/> where <c>T</c> is of type <see cref="string"/>. </description>
        /// </item>
        /// <item>
        /// <description> <see cref="int"/>. </description>
        /// </item>
        /// </list>
        /// </remarks>
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public global::System.BinaryData RequiredUnion { get; set; }

        /// <summary> required literal string. </summary>
        public global::UnbrandedTypeSpec.Models.ThingRequiredLiteralString RequiredLiteralString { get; } = "accept";

        /// <summary> required literal int. </summary>
        public global::UnbrandedTypeSpec.Models.ThingRequiredLiteralInt RequiredLiteralInt { get; } = 123;

        /// <summary> required literal float. </summary>
        public global::UnbrandedTypeSpec.Models.ThingRequiredLiteralFloat RequiredLiteralFloat { get; } = 1.23F;

        /// <summary> required literal bool. </summary>
        public bool RequiredLiteralBool { get; } = false;

        /// <summary> optional literal string. </summary>
        public global::UnbrandedTypeSpec.Models.ThingOptionalLiteralString? OptionalLiteralString { get; set; }

        /// <summary> optional literal int. </summary>
        public global::UnbrandedTypeSpec.Models.ThingOptionalLiteralInt? OptionalLiteralInt { get; set; }

        /// <summary> optional literal float. </summary>
        public global::UnbrandedTypeSpec.Models.ThingOptionalLiteralFloat? OptionalLiteralFloat { get; set; }

        /// <summary> optional literal bool. </summary>
        public bool? OptionalLiteralBool { get; set; }

        /// <summary> description with xml &lt;|endoftext|&gt;. </summary>
        public string RequiredBadDescription { get; set; }

        /// <summary> optional nullable collection. </summary>
        public global::System.Collections.Generic.IList<int> OptionalNullableList { get; set; }

        /// <summary> required nullable collection. </summary>
        public global::System.Collections.Generic.IList<int> RequiredNullableList { get; set; }
    }
}
