// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;

namespace UnbrandedTypeSpec
{
    internal static partial class Argument
    {
        public static void AssertNotNull<T>(T value, string name)
        {
            if ((value is null))
            {
                throw new global::System.ArgumentNullException(name);
            }
        }

        public static void AssertNotNull<T>(T? value, string name)
            where T : struct 
        {
            if (!value.HasValue)
            {
                throw new global::System.ArgumentNullException(name);
            }
        }

        public static void AssertNotNullOrEmpty<T>(global::System.Collections.Generic.IEnumerable<T> value, string name)
        {
            if ((value is null))
            {
                throw new global::System.ArgumentNullException(name);
            }
            if (((value is global::System.Collections.Generic.ICollection<T> collectionOfT) && (collectionOfT.Count == 0)))
            {
                throw new global::System.ArgumentException("Value cannot be an empty collection.", name);
            }
            if (((value is global::System.Collections.ICollection collection) && (collection.Count == 0)))
            {
                throw new global::System.ArgumentException("Value cannot be an empty collection.", name);
            }
            using global::System.Collections.Generic.IEnumerator<T> e = value.GetEnumerator();
            if (!e.MoveNext())
            {
                throw new global::System.ArgumentException("Value cannot be an empty collection.", name);
            }
        }

        public static void AssertNotNullOrEmpty(string value, string name)
        {
            if ((value is null))
            {
                throw new global::System.ArgumentNullException(name);
            }
            if ((value.Length == 0))
            {
                throw new global::System.ArgumentException("Value cannot be an empty string.", name);
            }
        }

        public static void AssertNotNullOrWhiteSpace(string value, string name)
        {
            if ((value is null))
            {
                throw new global::System.ArgumentNullException(name);
            }
            if (string.IsNullOrWhiteSpace(value))
            {
                throw new global::System.ArgumentException("Value cannot be empty or contain only white-space characters.", name);
            }
        }

        public static void AssertNotDefault<T>(ref T value, string name)
            where T : struct, global::System.IEquatable<T> 
        {
            if (value.Equals(default))
            {
                throw new global::System.ArgumentException("Value cannot be empty.", name);
            }
        }

        public static void AssertInRange<T>(T value, T minimum, T maximum, string name)
            where T : notnull, global::System.IComparable<T> 
        {
            if ((minimum.CompareTo(value) > 0))
            {
                throw new global::System.ArgumentOutOfRangeException(name, "Value is less than the minimum allowed.");
            }
            if ((maximum.CompareTo(value) < 0))
            {
                throw new global::System.ArgumentOutOfRangeException(name, "Value is greater than the maximum allowed.");
            }
        }

        public static void AssertEnumDefined(global::System.Type enumType, object value, string name)
        {
            if (!global::System.Enum.IsDefined(enumType, value))
            {
                throw new global::System.ArgumentException($"Value not defined for {enumType.FullName}.", name);
            }
        }

        public static T CheckNotNull<T>(T value, string name)
            where T : class 
        {
            global::UnbrandedTypeSpec.Argument.AssertNotNull(value, name);
            return value;
        }

        public static string CheckNotNullOrEmpty(string value, string name)
        {
            global::UnbrandedTypeSpec.Argument.AssertNotNullOrEmpty(value, name);
            return value;
        }

        public static void AssertNull<T>(T value, string name, string message = ((string)null))
        {
            if ((value != null))
            {
                throw new global::System.ArgumentException((message ?? "Value must be null."), name);
            }
        }
    }
}
